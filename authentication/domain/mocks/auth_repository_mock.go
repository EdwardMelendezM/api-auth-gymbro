// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package auth

import (
	context "context"

	domain "github.com/EdwardMelendezM/api-auth/authentication/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// CheckAccountStatus provides a mock function with given fields: ctx, body
func (_m *AuthRepository) CheckAccountStatus(ctx context.Context, body domain.LoginBody) bool {
	ret := _m.Called(ctx, body)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, domain.LoginBody) bool); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckExistenceByUsername provides a mock function with given fields: ctx, username
func (_m *AuthRepository) CheckExistenceByUsername(ctx context.Context, username string) int {
	ret := _m.Called(ctx, username)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// VerifyPassword provides a mock function with given fields: ctx, body
func (_m *AuthRepository) VerifyPassword(ctx context.Context, body domain.LoginBody) int {
	ret := _m.Called(ctx, body)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, domain.LoginBody) int); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interfaces on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
